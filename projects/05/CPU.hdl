// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And16(a=instruction,b=true,out[15]=i,out[13..14]=xx,out[12]=a,out[11]=c1,out[10]=c2,out[9]=c3,out[8]=c4,out[7]=c5,out[6]=c6,out[5]=d1,out[4]=d2,out[3]=d3,out[2]=j1,out[1]=j2,out[0]=j3);
    And(a=i,b=d3,out=writeM);
    Mux16(a=instruction,b=aluout,sel=i,out=wa1);
    Not(in=i,out=ni);
    Or(a=ni,b=d1,out=ad1);
    ARegister(in=wa1,load=ad1,out=wa3);

    Mux16(a=wa3,b=inM,sel=a,out=am);

    And(a=i,b=d2,out=dd2);
    DRegister(in=aluout,load=dd2,out=wd);
    
    ALU(x=wd,y=am,zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6,out=aluout,zr=zr,ng=ng);

    And16(a=aluout,b=true,out=outM);

    And16(a=wa3,b=true,out[15]=w,out[0..14]=addressM);

    Or(a=ng,b=zr,out=wnz);
    Not(in=wnz,out=ngzr);
    And(a=j1,b=ng,out=wj1);
    And(a=j2,b=zr,out=wj2);
    And(a=j3,b=ngzr,out=wj3);
    Or8Way(in[0]=wj1,in[1]=wj2,in[2]=wj3,in[3..7]=false,out=wj4);
    And(a=i,b=wj4,out=wjump);
    Not(in=wjump,out=winc);

    PC(in=wa3,load=wjump,inc=winc,reset=reset,out[0..14]=pc);
}